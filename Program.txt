私は今も昔もロジックを考えるのが得意ではありません。ただ、他人からそこそこ高く評価されるようにはなりました。 
自分なりに出来るだけ工夫をした例を書いてみます。何かの参考になるかもしれません。 

知識を丸暗記するより、漠然と把握したら他の事に手を付けていいです。
私は昔、上司からデザインパターンを丸暗記するように言われましたが、当時はあんまし役に立ちませんでした。それをどのように活用すればいいか解らなかったし、活用すべきタイミングがなかなか目の前に現われてくれなかったのです。なので、何となく覚えておいて問題にぶち当たった時に思い出してみようと割り切る事にしました。 
私の選択に、上司は不満気でしたが、他の勉強や仕事が忙しいので無視しました。今でもその判断は正しかったと思っています。 

情報を細分化したり分析するテクニックは自分なりに探しておいた方がよいと思います。
私は試行錯誤の結果、freemindでマインドマップ風に分解する事にしました。他人から見ると支離滅裂のようなのですが。 
これも、他人の意見に影響されすぎるのは良くないです。見た目よりも自分の頭を整理出来る方が優先なので、他人の意見より自分の感覚を信じたほうがいいです。最終的にドキュメントにまとめる時には綺麗に書いたほうがいいけれど。 

自分の道を作りましょう。
素直な方だと色んな意見に惑わされてしまう事があると思います。でも根拠に疑問があるなら、他人に従うより自分の選択を信じましょう。やってみて、問題があれば直せばいいのです。それも経験です。 
危険なのは、むやみに他人の意見を聞いてしまう事です。他人は決して責任を取ってはくれません。そして貴方がかかえる問題に貴方よりも真面目に取り組む事はほとんどありません。 

基本的にプログラミングは慣れてくると「パターン」の組み合わせであると気がつきます。問題が何か分析し終えた時点で、これはこの「パターン」で溶けるなと瞬時に頭の引き出しから取ってこれるというわけです。人のソースを読んだり話たりするのも、結局はこの「パターン」を知り、引き出しにいれる作業と言えます。 

それに関連付けて言うと、ソフトウェア界隈では「デザインパターン」と読んでいますが、有名なロジックは命名され、確立されているものがたくさんありますので、それらの本やドキュメントに目を通されるのも良いと思います。 
http://ja.wikipedia.org/wiki/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3_(%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2) 

なぜこうなっているのかを自分で考えたり、書いた人に聞いたりして、実装例を知り理解することで、自分の中でカタログが作られます。 
そして、それを頭の中に入れるだけでなく、実際に手を動かして練習しておくことです。 